{"version":3,"file":"main.js","mappings":"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","sources":["webpack://weatherapp/./src/getWeatherData.js","webpack://weatherapp/./src/factories.js","webpack://weatherapp/./src/element_builders.js","webpack://weatherapp/./src/index.js"],"sourcesContent":["function getHourlyWeather(cityName){\n  let format = `&hourly=temperature_2m,apparent_temperature,relativehumidity_2m,cloudcover,windspeed_10m,winddirection_10m,precipitation,weathercode`;\n  return fetchWeatherData(cityName, format).then(res => {\n    return res;\n  }).catch(err => {\n    return err;\n  });\n};\nfunction getDailyWeather(cityName) {\n  let format = `&daily=temperature_2m_max,temperature_2m_min,precipitation_sum,sunrise,sunset,weathercode`;\n  return fetchWeatherData(cityName,format).then(res => {\n    return res;\n  }).catch(err => {\n    return err;\n  })\n}\n\n\n\nfunction fetchWeatherData(cityName, format) {\n  return getCoordinates(cityName).then(res => {\n    const latitude = res.latitude;\n    const longitude = res.longitude;\n    return fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}${format}&timezone=auto&current_weather=true`,{mode:'cors'})\n            .then(function(res) {\n              return res.json();\n            })\n            .catch(err => {\n              return err;\n            });\n  })\n  .catch(err => {\n    return err;\n  });\n};\n\nfunction getCoordinates(cityName) {\n  return fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${cityName}&count=1`)\n          .then(function(res) {\n            if (res.ok){\n              return res.json();\n            };\n            throw Error(`Some thing ain't right!`);\n          })\n          .then(function(res) {\n            const results = res.results[0];\n            const latitude = results.latitude;\n            const longitude = results.longitude;\n            const timezone = results.timezone;\n            return {latitude,longitude,timezone}\n          })\n          .catch(function(err) {\n            throw Error(err)\n          });\n};\n\n\nexport {getDailyWeather, getHourlyWeather};","const Days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nfunction dailyFactory(res) {\n  const weatherObjects = [];\n  const result = res.daily;\n  const dates = result.time;\n  const precipitations = result.precipitation_sum;\n  const sunrises = result.sunrise;\n  const sunsets = result.sunset;\n  const maxs = result.temperature_2m_max;\n  const mins = result.temperature_2m_min;\n  const weatherCodes = result.weathercode;\n  for (let i = 0; i < 7; ++i){\n    let day = Days[new Date(dates[i]).getDay()];\n    let precipitation = precipitations[i];\n    let sunrise = sunrises[i];\n    let sunset = sunsets[i];\n    let max = maxs[i];\n    let min = mins[i];\n    let weatherCode = weatherCodes[i];\n    let weatherObject = {day, precipitation, sunrise, sunset, max, min, weatherCode};\n    weatherObjects.push(weatherObject);\n  };\n  return weatherObjects;\n};\n\nfunction hourlyFactory(res) {\n  const weatherObjects = [];\n  const currentWeather = res.current_weather;\n  const ctTime = currentWeather.time;\n  const hourly = res.hourly;\n  const temperatures = hourly.temperature_2m;\n  const times = hourly.time;\n  const apparentTemperatures = hourly.apparent_temperature;\n  const cloudCovers = hourly.cloudcover;\n  const precipitations = hourly.precipitation;\n  const humidities = hourly.relativehumidity_2m;\n  const weatherCodes = hourly.weathercode;\n  let index = 0;\n  while (true) {\n    if (times[index] === ctTime) {\n      let apparentTemperature = apparentTemperatures[index];\n      let humidity = humidities[index];\n      let precipitation = precipitations[index]\n      let cloudCover = cloudCovers[index];\n      let weatherCode = weatherCodes[index];\n      currentWeather['apparentTemperature'] = apparentTemperature;\n      currentWeather['humidity'] = humidity;\n      currentWeather['precipitation'] = precipitation;\n      currentWeather['cloudCover'] = cloudCover;\n      currentWeather['weatherCode'] = weatherCode;\n      break;\n    };\n    index += 1;\n  };\n  for (let i = 0; i < 24; i++) {\n    index += 1;\n    let time = times[index];\n    let temperature = temperatures[index];\n    let cloudCover = cloudCovers[index];\n    let precipitation = precipitations[index]\n    let humidity = humidities[index]\n    let weatherCode = weatherCodes[index];\n    weatherObjects.push({time, temperature, cloudCover, precipitation, humidity, weatherCode});\n  };\n  return {currentWeather,weatherObjects};\n};\n\nexport {dailyFactory, hourlyFactory};","const body = document.querySelector('body');\n\nconst weatherCodes = {\n  '0': `/clear_day.svg`,\n  '1': `/partly_cloudy_day.svg`,\n  '2': `/partly_cloudy_day.svg`,\n  '3': `/fully_cloudy.svg`,\n  '4': `/foggy.svg`,\n  '5': `/light_rain.svg`,\n  '6': `/rain.svg`,\n  '7': `/cloudy_snowing.svg`,\n  '8': `/heavy_rain.svg`,\n  '9': `/thunderstorm.svg`\n}\n\nfunction currentBuilder(current, cityName) {\n  const search = document.getElementById('search-icon');\n  search.style.background = `url('./pngs/${body.dataset.theme}/search.svg')`;\n\n  const changeTheme = document.getElementById('change-theme');\n  changeTheme.classList.add('load');\n  changeTheme.src = `./pngs/${body.dataset.theme}/mode.svg`;\n  changeTheme.dataset.path = '/mode.svg'\n\n  const temp = document.getElementById('temp');\n  const svg = document.getElementById('current-svg');\n  svg.classList.add('svg', 'load');\n  const location = document.getElementById('location');\n  const appTemp = document.getElementById('app-temp');\n  const humidity = document.getElementById('hum');\n  const wind = document.getElementById('wind');\n\n  temp.innerHTML = '';\n  svg.innerHTML = '';\n  location.innerHTML = '';\n  appTemp.innerHTML = '';\n  humidity.innerHTML = '';\n  wind.innerHTML = '';\n\n  temp.innerText = `${current.temperature}\\u00b0C`;\n  let weatherCode = (current.weatherCode < 10) ? current.weatherCode : Math.floor((current.weatherCode) / 10);\n  svg.src = './pngs/' + body.dataset.theme + weatherCodes[weatherCode];\n  svg.dataset.path = weatherCodes[weatherCode];\n  location.innerText = `${cityName[0].toUpperCase()}${cityName.substring(1)}`;\n  appTemp.innerText = `${current.apparentTemperature}\\u00b0C`;\n\n  humidity.classList.add('values');\n  const hsvg = document.createElement('img');\n  hsvg.classList.add('load');\n  if (current.humidity < 40) {\n    hsvg.src = `./pngs/${body.dataset.theme}/low_humidity.svg`;\n    hsvg.dataset.path = '/low_humidity.svg';\n  }\n  else if(current.humidity >= 40 && current.humidity < 60) {\n    hsvg.src = `./pngs/${body.dataset.theme}/mid_humidity.svg`;\n    hsvg.dataset.path = '/mid_humidity.svg';\n  }\n  else{\n    hsvg.src = `./pngs/${body.dataset.theme}/high_humidity.svg`;\n    hsvg.dataset.path = '/high_humidity.svg';\n  }\n  const hval = document.createElement('span');\n  hval.innerText = current.humidity + '%';\n  humidity.append(hsvg, hval)\n\n  wind.classList.add('values');\n  const wsvg = document.createElement('img');\n  wsvg.classList.add('load');\n  wsvg.src = `./pngs/${body.dataset.theme}/wind.svg`;\n  wsvg.dataset.path = '/wind.svg';\n  const wval = document.createElement('span')\n  wval.innerText = current.windspeed + 'km/h';\n\n  wind.append(wsvg, wval)\n};\n\nfunction dailyBuilder(daily) {\n  const day = document.createElement('div');\n  day.classList.add('title')\n  day.innerText = daily.day;\n\n  const high = document.createElement('p');\n  high.classList.add('high');\n  high.innerText = (`${daily.max}\\u00b0C`);\n  const low = document.createElement('p');\n  low.classList.add('low');\n  low.innerText = (`${daily.min}\\u00b0C`);\n\n  const osvg = document.createElement('img');\n  osvg.classList.add('svg', 'load');\n  let weatherCode = (daily.weatherCode < 10) ? daily.weatherCode : Math.floor((daily.weatherCode) / 10);\n  osvg.dataset.path = weatherCodes[weatherCode];\n  osvg.src = './pngs/' + body.dataset.theme + weatherCodes[weatherCode];\n\n  const rise = document.createElement('span');\n  rise.append(`Sunrise:`, document.createElement('br'), `${daily.sunrise.split('T')[1]}`);\n  const set = document.createElement('span');\n  set.append(`Sunset:`, document.createElement('br'), `${daily.sunset.split('T')[1]}`);\n\n  const hilo = document.createElement('div');\n  hilo.classList.add('value');\n\n  const riseset = document.createElement('div');\n  riseset.classList.add('spread', 'value');\n\n  const container = document.createElement('div');\n  container.classList.add('daily', 'weather-object');\n\n  hilo.append(high, low);\n\n  const div = document.createElement('div');\n  div.classList.add('spread');\n  div.append(osvg, hilo);\n\n  riseset.append(rise, set);\n\n  container.append(day, div, riseset);\n  document.querySelector('.daily-container').append(container);\n};\n\nfunction hourlyBuilder(hourly) {\n  const hour = document.createElement('div');\n  hour.classList.add('title')\n  hour.innerText = `${hourly.time.split('T')[1]}`;\n\n  const temp = document.createElement('div');\n  temp.innerText = `${hourly.temperature}\\u00b0C`;\n\n  const cloudCover = document.createElement('img');\n  cloudCover.classList.add('svg', 'load');\n  let weatherCode = (hourly.weatherCode < 10) ? hourly.weatherCode : Math.floor((hourly.weatherCode) / 10);\n  cloudCover.dataset.path = weatherCodes[weatherCode];\n  cloudCover.src = './pngs/' + body.dataset.theme + weatherCodes[weatherCode];\n  \n  const hdiv = document.createElement('div');\n  hdiv.classList.add('values');\n  const hsvg = document.createElement('img');\n  hsvg.classList.add('load');\n  if (hourly.humidity < 40) {\n    hsvg.src = `./pngs/${body.dataset.theme}/low_humidity.svg`;\n    hsvg.dataset.path = '/low_humidity.svg'\n  }\n  else if(hourly.humidity >= 40 && hourly.humidity < 60) {\n    hsvg.src = `./pngs/${body.dataset.theme}/mid_humidity.svg`;\n    hsvg.dataset.path = '/mid_humidity.svg'\n  }\n  else{\n    hsvg.src = `./pngs/${body.dataset.theme}/high_humidity.svg`;\n    hsvg.dataset.path = '/high_humidity.svg'\n  }\n  const hval = document.createElement('span');\n  hval.innerText = hourly.humidity + '%';\n  hdiv.append(hsvg, hval)\n\n  const container = document.createElement('div');\n  container.classList.add('hourly', 'weather-object');\n\n  container.append(hour, temp, cloudCover, hdiv);\n  document.querySelector('.hourly-container').append(container);\n};\n\nexport {currentBuilder, dailyBuilder, hourlyBuilder};","import {getDailyWeather, getHourlyWeather} from \"./getWeatherData\";\nimport { dailyFactory, hourlyFactory } from \"./factories\";\nimport {currentBuilder, dailyBuilder, hourlyBuilder} from './element_builders';\n\nlet cityName = 'london';\nlet theme = 'dark';\nasync function controller() {\n  const input = document.getElementById('search');\n  input.blur();\n  cityName = input.value || cityName;\n  try{\n    const daily = dailyFactory(await getDailyWeather(cityName));\n    const hourly = hourlyFactory(await getHourlyWeather(cityName));\n    clear();\n    currentBuilder(hourly.currentWeather, cityName);\n    daily.forEach(day => {\n      dailyBuilder(day);\n    });\n    hourly.weatherObjects.forEach(hour => {\n      hourlyBuilder(hour);\n    });\n    input.value = '';\n  }catch(err) {\n    const input = document.getElementById('search'); \n    input.setCustomValidity('Enter a valid city name!');\n    input.reportValidity();\n    input.oninput = () => {\n      input.setCustomValidity('');\n    };\n    return;\n  };\n};\n\nfunction clear() {\n  const clearables = document.querySelectorAll('.clear');\n  clearables.forEach(clearable => {\n    clearable.innerHTML = '';\n  });\n};\n\nconst search = document.getElementById('search-icon');\nsearch.addEventListener('click', (e) => {\n  e.preventDefault();\n  controller();\n});\n\nconst root = document.querySelector(':root');\nconst body = document.querySelector('body');\nconst changeTheme = document.getElementById('change-theme');\nchangeTheme.addEventListener('click', () => {\n  const svgs = document.querySelectorAll('.load')\n  let temp = body.dataset.theme;\n  body.dataset.theme = theme;\n  theme = temp;\n\n  search.style.background = `url('./pngs/${body.dataset.theme}/search.svg')`\n\n  svgs.forEach(svg => {\n    svg.src = './pngs/' + body.dataset.theme + svg.dataset.path;\n  })\n\n  let rootStyle = getComputedStyle(root);\n  let bg = rootStyle.getPropertyValue('--bg');\n  let colo = rootStyle.getPropertyValue('--colo');\n  root.style.setProperty('--bg', colo);\n  root.style.setProperty('--colo', bg);\n})\n\ncontroller();\n"],"names":["fetchWeatherData","cityName","format","fetch","then","res","ok","json","Error","results","latitude","longitude","timezone","catch","err","getCoordinates","mode","Days","body","document","querySelector","weatherCodes","theme","async","controller","input","getElementById","blur","value","daily","weatherObjects","result","dates","time","precipitations","precipitation_sum","sunrises","sunrise","sunsets","sunset","maxs","temperature_2m_max","mins","temperature_2m_min","weathercode","i","weatherObject","day","Date","getDay","precipitation","max","min","weatherCode","push","dailyFactory","getDailyWeather","hourly","currentWeather","current_weather","ctTime","temperatures","temperature_2m","times","apparentTemperatures","apparent_temperature","cloudCovers","cloudcover","humidities","relativehumidity_2m","index","apparentTemperature","humidity","cloudCover","temperature","hourlyFactory","getHourlyWeather","querySelectorAll","forEach","clearable","innerHTML","current","style","background","dataset","changeTheme","classList","add","src","path","temp","svg","location","appTemp","wind","innerText","Math","floor","toUpperCase","substring","hsvg","createElement","hval","append","wsvg","wval","windspeed","currentBuilder","high","low","osvg","rise","split","set","hilo","riseset","container","div","dailyBuilder","hour","hdiv","hourlyBuilder","setCustomValidity","reportValidity","oninput","search","addEventListener","e","preventDefault","root","svgs","rootStyle","getComputedStyle","bg","getPropertyValue","colo","setProperty"],"sourceRoot":""}